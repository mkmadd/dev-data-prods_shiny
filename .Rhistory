psubtrain <- preProcess(subtrain, method='pca', thresh=.80)
psubtest <- preProcess(subtest, method='pca', thresh=.80)
trainPC <- predict(psubtrain, subtrain)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
testPC <- predict(psubtest, subtest)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
testPC <- predict(psubtrain, subtest)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
modelFit1 <- train(training$diagnosis ~ ., method="glm", data= subtrain)
modelFit1 <- train(training$diagnosis ~ ., method="glm", data= subtrain)
confusionMatrix(testing$diagnosis, predict(modelFit1,subtest))
library(shinyapps)
library(shinyApps)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mkmadd', token='665EA8B030F6447B4EED125B34E34FA0', secret='+/PYJc8ngM0PV0fVy3jrgWNvCK0tUmkSQyK1TFef')
install_github('slidify', 'ramnathv')
devtools::install_github('slidify', 'ramnathv')
devtools::install_github('slidifyLibraries', 'ramnathv')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
segment
segmentationOriginal
head(segmentationOriginal)
training <- segmentationOriginal[segmentationOriginal$Case=='Train']
training <- segmentationOriginal[segmentationOriginal$Case=='Train', ]
testing <- segmentationOriginal[segmentationOriginal$Case=='Test', ]
head(training)
dim(training)
dim(testing)
set.seed(125)
?train
names(training)
?segmentationOriginal
modFit <- train(Class ~ . - c('Case', 'Cell'), method='rpart', data=training)
modFit <- train(Class ~ . -c('Case', 'Cell'), method='rpart', data=training)
?formual
?formula
modFit <- train(Class ~ . -c(Case, Cell), method='rpart', data=training)
modFit <- train(Class ~ . -(Case, Cell), method='rpart', data=training)
modFit <- train(Class ~ . -Case -Cell, method='rpart', data=training)
modFit$finalModel
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel, uniform=T)
text(modFit$finalModel, use.n=T, all=T, cex=.8)
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
library(pgmm)
data(olive)
install.packages("C:/Users/Michael/Downloads/pgmm_1.0.tar.gz", repos = NULL, type = "source")
library(pgmm)
setwd('E:/Coursera/Practical Machine Learning')
load('olive.rda')
olive
head(olive)
olive = olive[,-1]
newdata <- as.data.frame(t(colMeans(olive)))
newdata
colMeans(olive)
?t
test <- as.data.frame(colMeans(olive))
test
?tree
??tree
library(tree)
fit <- tree(Area ~ ., olive)
fit
plot(fit)
summary(fit)
pred <- fit.predict
fit.predict
predict(fit)
?predict.tree
predict(fit, newdata)
olive$Area
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
?train
names(SAheart)
?SAheart
set.seed(13234)
train(chd~age+alcohol+obesity+tobacoo+typea+ldl, trainSA, method="glm", family='binomial')
train(chd~age+alcohol+obesity+tobacco+typea+ldl, trainSA, method="glm", family='binomial')
fit1 <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, trainSA, method="glm", family='binomial')
response
missClass <- function(values, prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
head(trainSA)
missClass(trainSA$chd, predict(trainSA))
?predict.glm
missClass(trainSA$chd, predict(fit1, newdata=trainSA))
missClass(testSA$chd, predict(fit1, newdata=testSA))
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
?randomForest
?rf
?varImp
?prox
?gini
fitrf <- train(y~., data=vowel.train, method='rf', prox=T)
varImp(fitrf)
set.seed(33833)
fitrf <- train(y~., data=vowel.train, method='rf', prox=T)
varImp(fitrf$finalModel)
order(varImp(fitrf$finalModel))
names(fitrf)
order(varImp(fitrf$finalModel), desc=T)
order(varImp(fitrf$finalModel), decr=T)
?order
order(varImp(fitrf$finalModel), decreasing=T)
fitrf$xlevels
fitrf$terms
?cut2
head(vowel.train)
fitrf <- train(y~., data=vowel.test, method='rf', prox=T)
varImp(fitrf$finalModel)
order(varImp(fitrf$finalModel), decreasing=T)
fitrf <- train(y~., data=vowel.train, method='rf')
order(varImp(fitrf$finalModel), decreasing=T)
?SAheart
set.seed(13234)
fit1 <- train(chd ~ . -sbp -adiposity - famhist, trainSA, method="glm", family='binomial')
missClass <- function(values, prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
missClass(trainSA$chd, predict(fit1, newdata=trainSA))
missClass(testSA$chd, predict(fit1, newdata=testSA))
setwd('E:/Coursera/Practical Machine Learning')
dir()
tr_url <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
tst_url <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
trfname <- 'pml-training.csv'
tstfname <- 'pml-testing.csv'
setwd('E:/Coursera/Practical Machine Learning')
if (!trfname %in% dir()) {
download.file(tr_url, trfname)
}
if (!tstfname %in% dir()) {
download.file(tst_url, tstfname)
}
training <- read.csv(trfname)
testing <- read.csv(tstfname)
head(training)
length(names(training))
names(training)
head(training)
sapply(training, !is.na())
sapply(training, !is.na
)
?is.na
sapply(training, is.na)
nas <- sapply(training, is.na)
head(nas)
colSum(nas)
colsum(nas)
?colMeans
colSums(nas)
colSums(nas)!=0 || colSums(nas)!=19216
colSums(nas)!=19216
colSums(nas)==19216
sum(colSums(nas)==19216)
sum(colSums(nas)!=0)
dim(training)
sum(num_nas==19216)
num_nas <- colSums(nas)
sum(num_nas==19216)
sum(num_nas!=0)
num_nas
colnames(num_nas)
num_nas
names(num_nas)
names(num_nas==19216)
names(num_nas)[num_nas==19216]
na_vars <- names(num_nas)[num_nas==19216]
na_varas
na_vars
trim <- training[, -na_vars]
head(training[, na_vars])
trim <- training
trim[, na_vars] <- NULL
trim[na_vars] <- NULL
trim <- subset(training, select=-na_vars)
typeof(na_vars)
class(na_vars)
trim[na_vars] <- list(NULL)
sum(names(trim))
length(names(trim))
length(names(training))
length(na_vars)
trim <- training[, !names(training) %in% na_vars]
head(trim)
trim[na_vars] <- list(NULL)
head(trim)
dim(trim)
names(trim)
names(training)
head(training)
head(training$amplitude_yaw_dumbbel)
str(training)
str(trim)
table(training$amplitude_yaw_dumbbel)
sapply(trim, table)
str(trim)
blanks <- sapply(trim, function(x){sum(x=='')})
blanks
blank_vars <- names(colSums(blanks))[colSums(blanks)==19216]
colSums(blanks)
blanks
blank_vars <- names(blanks)[blanks==19216]
blank_vars
length(blank_vars)
trim <- trim[, !names(trim) %in% blank_vars]
head(trim)
dim(trim)
trim[c(2,4, 5, 6), 1:30]
trim[1:30, c(2,4, 5, 6)]
trim[1:30, c(2,5,6,7,8)]
trim[1:100, c(2,5,6,7,8)]
?random
?rf
?train
trainControl
?trainControl
createTimeSlices(1:9, 5, 1, fixedWindow = FALSE)
createTimeSlices(1:9, 5, 1, fixedWindow = TRUE)
createTimeSlices(1:9, 5, 3, fixedWindow = TRUE)
createTimeSlices(1:9, 5, 3, fixedWindow = FALSE)
table(trim$classe)
which(trim$classe=='E')
test <- trim[1:3000, ]
table(test)
table(test$classe)
nrow(trim)
table(trim$classe)
dim(trim)
names(trim)
x
trim$x
trim$X
names(trim)
user_name
trim$user_name
unique(trim$user_name)
names(trim)
unique(trim$cvtd_timestamp)
unique(trim[trim$cvtd_timestamp=='14:58 05/12/2011']$classe)
class(trim$cvtd_timestamp)
unique(trim[trim$cvtd_timestamp=='05/12/2011 14:24']$classe)
unique(trim[trim$cvtd_timestamp=='05/12/2011 14:24', ]$classe)
for (i in unique(trim$cvtd_timestamp)){
print(unique(trim[trim$cvtd_timestamp==i, ]$classe))
}
names(trim)
trim <- trim[-seq(1:7), ]
names(trim)
trim <- trim[, -seq(1:7)]
names(trim)
trim <- training[, !names(training) %in% na_vars]
trim <- trim[, !names(trim) %in% blank_vars]
trim <- trim[, -seq(1:7)]
dim(trim)
for (i in unique(trim$cvtd_timestamp)){
print(table(trim[trim$cvtd_timestamp==i, ]$classe))
}
table(trim[trim$cvtd_timestamp==i, ]$classe)
for (i in unique(trim$cvtd_timestamp)){
table(trim[trim$cvtd_timestamp==i, ]$classe)
}
unique(trim$cvtd_timestamp)
trim$cvtd_timestamp
trim
choose <- sample(1:nrow(trim), 5000, replace=F)
choose
set.seed(1)
choose <- sample(1:nrow(trim), 5000, replace=F)
fit <- train(classe~., data=trim[choose], method='rf', trControl=trainControl(method='cv'))
names(trim)
trim$classe
fit <- train(classe ~ ., data=trim[choose], method='rf', trControl=trainControl(method='cv'))
fit <- train(classe ~ ., data=trim[choose, ], method='rf', trControl=trainControl(method='cv'))
missClass(trim[choose, ]$classe, predict(fit$finalModel, newdata=trim[choose, ]$classe))
missClass(trim[choose, ]$classe, predict(fit$finalModel, newdata=trim[choose, ]))
predict(fit$finalModel, newdata=trim[choose, ])
sum(predict(fit$finalModel, newdata=trim[choose, ])!=trim[choose, ]$classe)
sum(predict(fit$finalModel, newdata=trim[choose, ])==trim[choose, ]$classe)
sum(predict(fit$finalModel, newdata=trim[-choose, ])!=trim[-choose, ]$classe)
?confusionMatrix
confusionMatrix(predict(fit$finalModel, newdata=trim[-choose, ]), trim[-choose, ]$classe)
confusionMatrix(predict(fit$finalModel, newdata=trim[choose, ]), trim[choose, ]$classe)
names(fit)
fit$modelInfo
fit$modelInfo()
fit
confusionMatrix(predict(fit$finalModel, newdata=trim[-choose, ]), trim[-choose, ]$classe)
choose_big <- sample(1:nrow(trim), 10000, replace=F)
fit_big <- train(classe ~ ., data=trim[choose_big, ], method='rf', trControl=trainControl(method='cv'))
confusionMatrix(predict(fit$finalModel, newdata=trim[choose_big, ]), trim[choose_big, ]$classe)
confusionMatrix(predict(fit$finalModel, newdata=trim[-choose_big, ]), trim[-choose_big, ]$classe)
confusionMatrix(predict(fit$finalModel, newdata=trim[-choose_big, ]))
?trainControl
?train
?mtry
str(trim)
plot(fit)
plot(fit_big)
densityplot(fit)
densityplot(fit, metric="Kappa", pch = "|")
densityplot(fit)
densityplot(fit, metric="Kappa", pch = "|")
densityplot(fit)
fit1 <- train(classe ~ ., data=trim[choose_big, ], method='rf', tuneLength = 5,
trControl=trainControl(method="repeatedcv", repeats=5, verboseIter=F), metric="Kappa")
confusionMatrix(predict(fit1$finalModel, newdata=trim[choose_big, ]), trim[choose_big, ]$classe)
confusionMatrix(predict(fit1$finalModel, newdata=trim[-choose_big, ]), trim[-choose_big, ]$classe)
fit1
resamps <- resamples(fit1)
fit1
names(fit1)
fit1$resample
plot(fit1$resample)
plot(fit1$resample$Accuracy, col=fit1$resample$Resample)
names(fit1)
for (i in names(fit1)) { print(fit1[i])}
names(fit1)
names(fit1)[1]
fit1[names(fit1)[1]]
fit1[names(fit1)[2]]
fit1[names(fit1)[3]]
fit1[names(fit1)[4]]
plot(fit1$results$Kappa)
fit1[names(fit1)[5]]
fit1[names(fit1)[6]]
fit1[names(fit1)[7]]
fit1[names(fit1)[8]]
fit1[names(fit1)[9]]
fit1[names(fit1)[10]]
names(fit1)[10]
names(fit1$control)
fit1[names(fit1)[11]]
fit1[names(fit1)[12]]
fit1[names(fit1)[13]]
names(fit1)[13]
fit1[names(fit1)[14]]
fit1$results
fit1[names(fit1)[15]]
fit1[names(fit1)[16]]
fit1[names(fit1)[17]]
fit1[names(fit1)[18]]
fit1[names(fit1)[19]]
fit1$times
fit1[names(fit1)[20]]
fit1[names(fit1)[21]]
fit1[names(fit1)[22]]
fit1[names(fit1)[23]]
fit1[names(fit1)[24]]
testing
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
test <- testing[, !names(testing) %in% na_vars]
test <- test[, !names(test) %in% blank_vars]
test <- test[, -seq(1:7)]
head(test)
dim(test)
test[, -problem_id]
test[, -"problem_id""]
''
""
test[, -"problem_id"]
names(test[, -53])
predict(fit1$finalModel, newdata=test[, -53])
answers <- predict(fit1$finalModel, newdata=test[, -53])
answers
class(answers)
as.character(answers)
answers <- as.character(predict(fit1$finalModel, newdata=test[, -53]))
answers
pml_write_files(answers)
getwd()
names(test)
test
num_nas
sum(num_nas==19216)
sum(blanks==19216)
plot(trim[, 1])
plot(trim[, 2])
plot(trim[, 3])
plot(trim[, 4])
names(trim[4])
plot(trim[, 'total_accel_belt'])
fit1$results
real_answers <- answers
real_answers
fit1
fit1$bestTune
names(fit1$control)
fit1$bestModel
fit1$times
names(fit1)
fit1$finalModel
fit1[names(fit1)[24]]
fit1$results
names(fit1)
fit1$perfNames
fit1$coefNames
fit1$coefnames
names(fit1)
fit1$maximize
fit1$terms
varImpPlot(fit1)
varImpPlot(fit)
varImp(fit)
varImp(fit1)
?tuneLength
?train
table(trim[choose_big]$classe)
table(trim[choose_big, ]$classe)
table(trim[choose, ]$classe)
table(trim$classe)
fit1$finalModel
names(fit1$finalModel)
fit1$finalModel$oob.times
names(fit1$finalModel)
fit1$finalModel$err.rate
fit1$finalModel
fit1$finalModel$err.rate$OOB
head(fit1$finalModel$err.rate)
mean(fit1$finalModel$err.rate[, 1])
confusionMatrix(predict(fit1$finalModel, newdata=trim[-choose_big, ]), trim[-choose_big, ]$classe)
fit1$results
fit1$finalModel
fit1$bestTune
names(fit1$finalModel)
fit1$finalModel$predicted
names(fit1$finalModel)
fit1$finalModel$confusion
names(fit1$finalModel$confusion)
mean(fit1$finalModel$confusion[, 6])
fit1$finalModel$inbag
fit1$finalModel$mtry
fit1$bestTune
class(fit1$bestTune)
fit1$finalModel$mtry
confusionMatrix(predict(fit1$finalModel, newdata=trim[-choose_big, ]), trim[-choose_big, ]$classe)
temp <- confusionMatrix(predict(fit1$finalModel, newdata=trim[-choose_big, ]), trim[-choose_big, ]$classe)
names(temp)
temp$overall
temp$overall$Accuracy
temp$overall['Accuracy']
fit1$results
varImp(fit1)
densityplot(fit1)
answers
fit1$results
setwd('E:/Coursera/Developing Data Products/Final Project')
dir
dir()
runApp()
library(shiny)
runApp()
test1 <- as.Date('5-16-14')
?as.Date
test1 <- Date('5-16-14')
test1 <- as.Date('5-16-2014')
test1 <- as.Date('2014-04-22')
test1
test2 <- Sys.today
test2 <- Sys.Today
test2 <- Sys.Date
test2
test2 <- Sys.Date()
test2
test2-test1
time differential
temp <- test2-test1
class(temp)
typeof(temp)
difftime
?difftime
as.numeric(temp, units="days")
as.numeric(temp, units="secs")
as.numeric(temp, units="hours")
as.character(temp, units="days")
runApp()
runApp(display.mode='showcase')
runApp()
library(shinyapps)
deployApp()
shinyapps::setAccountInfo(name='mkmadd', token='665EA8B030F6447B4EED125B34E34FA0', secret='+/PYJc8ngM0PV0fVy3jrgWNvCK0tUmkSQyK1TFef')
deployApp()
shinyapps::setAccountInfo(name='mkmadd', token='665EA8B030F6447B4EED125B34E34FA0', secret='+/PYJc8ngM0PV0fVy3jrgWNvCK0tUmkSQyK1TFef')
deployApp()
